<style lang="less">
  .section{
    background-color: white;
    border: 1px solid transparent;
    border-left: none;
    border-right: none;
    margin: 10px 0;

  }
  .section:first-child{
    border-top: none;
  }

  .weui-cell__bd.action{
    text-align: center;
  }
  .weui-cell__bd.action.warning{
    color: #ff3536;
  }
  input[disabled]{
    border: 1px solid transparent !important;
  }
</style>
<template class="bg">
  <view >
    <view class="section weui-cells weui-cells_after-title">
      <view class="weui-cell weui-cell_input">
        <view class="weui-cell__hd">
          <view class="weui-label">账单描述</view>
        </view>
        <view class="weui-cell__bd">
          <input disabled="{{ !editable }}" class="weui-input" placeholder="请输入账单标题" value="{{ bill.title }}" @input="bindTitle"/>
        </view>
      </view>
      <view class="weui-cell weui-cell_input">
        <view class="weui-cell__hd">
          <view class="weui-label">账单金额</view>
        </view>
        <view class="weui-cell__bd">
          <input disabled="{{ !editable }}" type="digit" class="weui-input" placeholder="请输入账单金额"  value="{{ bill.money }}" @input="bindMoney"/>
        </view>
      </view>

    </view>

    <view class="section weui-panel weui-panel_access">
      <view class="weui-panel__hd">参与人员
        <image wx:if="{{ editable }}" bindtap="showChecker" style="width: 20px; height: 20px; vertical-align: middle; position: relative; top: -1px; margin-left: 10px;" src="/images/icon_add.png"></image>
      </view>
      <view class="weui-panel__bd">
        <repeat for="{{ bill.participants.data }}" index="index" item="participant">
          <view class="weui-media-box weui-media-box_appmsg">
            <view class="weui-media-box__hd weui-media-box__hd_in-appmsg">
              <image class="weui-media-box__thumb" src="{{ participant.user.avatar_url }}"/>
            </view>
            <view class="weui-media-box__bd weui-media-box__bd_in-appmsg clear-fix">
              <view class="weui-media-box__title" style="width: 238px;">
                {{ participant.user.name }}
                <icon wx:if="{{ isOwner }}" style="float: right;" type="cancel" size="24px" @tap="removeParticipant({{ index }})"></icon>
              </view>
              <view class="weui-media-box__desc" style="display: flex; align-items: center; font-size: 14px; margin-top: 5px;">
                需支付：<input disabled="{{ !editable || !participant.fixed }}" @input="bindSplitMoney({{ index }})" type="digit" value="{{ participant.split_money }}" style="width: 180px; display: inline-block; padding: 2px; border: 1px solid lightgrey; height: 24px; min-height: 0; "/>
              </view>
              <view class="weui-media-box__desc" style="display: flex; align-items: center; font-size: 14px; margin-top: 5px;">
                自动计算：<switch disabled="{{ !editable }}" @change="bindFixed({{ index }})" checked="{{ !participant.fixed }}" style="margin-right: 10px;"></switch>
                已支付：<switch disabled="{{ !editable }}" @change="bindPaid({{ index }})" checked="{{ participant.paid }}" style="margin-right: 10px;"></switch>
              </view>

            </view>
          </view>
        </repeat>


      </view>
    </view>

    <view class="section weui-cells weui-cells_after-title">
      <view class="weui-cells__title">具体事项（可选填）</view>
      <view wx:if="{{ editable }}" class="weui-cell">
        <input disabled="{{ !editable }}" value="{{ itemTitle }}" @input="bindTempItemTitle" type="text" placeholder="名称" />
        <input disabled="{{ !editable }}" value="{{ itemMoney }}" @input="bindTempItemMoney" style="width: 80px; margin: 0 10px;" type="digit" placeholder="金额"/>
        <icon type="success_no_circle" size="24px" @tap="addItem()"></icon>
      </view>
      <repeat for="{{ bill.items.data }}" index="index" item="item">
        <view class="weui-cell">
          <input disabled="{{ !editable }}" value="{{ item.title }}" @input="bindItemTitle({{ index }})" type="text" placeholder="名称" />
          <input disabled="{{ !editable }}" value="{{ item.money }}" @input="bindItemMoney({{ index }})" style="width: 80px; margin: 0 10px;" type="digit" placeholder="金额"/>
          <icon wx:if="{{ editable }}" type="cancel" size="24px" @tap="removeItem({{ index }})"></icon>
        </view>
      </repeat>

    </view>

    <view class="section weui-cells weui-cells_after-title">
      <view class="weui-cells__title">账单描述（可选填）</view>
      <view class="weui-cells weui-cells_after-title">
        <view class="weui-cell">
          <view class="weui-cell__bd">
            <textarea disabled="{{ !editable }}" auto-height="true" maxlength="1000" value="{{ bill.description }}" @input="bindDescription" class="weui-textarea" placeholder="">
            </textarea>
          </view>
        </view>
      </view>
    </view>

    <view wx:if="{{ editable }}" class="section weui-cells weui-cells_after-title">
      <view class="weui-cell" hover-class="weui-cell_active" bindtap="save">
        <view class="weui-cell__bd action">
          保存账单
        </view>
      </view>
      <view wx:if="{{ isOwner }}" class="weui-cell" hover-class="weui-cell_active" bindtap="exit">
        <view class="weui-cell__bd action warning" >
          删除账单
        </view>
      </view>
    </view>
  </view>

  <participants-checker :syncShow.sync="showChecker" :syncData.sync="otherParticipants" @finished.user="onCheckerFinished"></participants-checker>
</template>

<script>
  import wepy from 'wepy'
  import participantsChecker from '@/components/participantsChecker'
  import api from '@/utils/api'
  import Decimal from 'decimal'
  import {debounce} from 'debounce'

  export default class Management extends wepy.page {
    config = {
      navigationBarTitleText: '账单管理'
    }
    components = {
      'participants-checker': participantsChecker
    }

    mixins = []

    data = {
      itemTitle: '',
      itemMoney: 0,
      user: {},
      bill: {
        title: '',
        description: '',
        money: 0,
        activity_id: null,
        items: {
          data: []
        },
        participants: {
          data: []
        }
      },
      activityParticipants: [],
      showChecker: false,
      calculating: false
    }

    computed = {
      otherParticipants() {
        let otherParticipants = []
        if (this.bill && this.bill.participants) {
          this.activityParticipants.forEach((item) => {
            if (this.bill.participants.data.findIndex(selectedItem => selectedItem.user_id === item.id) === -1) {
              otherParticipants.push(item)
            }
          })
        }
        return otherParticipants
      },
      isOwner() {
        return this.bill.user_id === this.user.id
      },
      editable() {
        return !this.bill.id || this.user.id === this.bill.user_id
      }
    }
    methods = {
      bindTitle(e) {
        this.bill.title = e.detail.value
      },
      bindMoney(e) {
        console.log(e.detail.value.length)
        console.log(e.detail.value)
        if (e.detail.value.length === 0) {
          this.bill.money = 0
          this.reCaculateBill()
          return 0
        } else {
          if ((/^0[1-9]\d*$/.test(e.detail.value.toString()))) {
            this.bill.money = Number.parseFloat(e.detail.value)
            this.reCaculateBill()
            return this.bill.money
          }
          let regex = /^(0|[1-9]\d*)(\.(\d){0,2})?$/
          if (!regex.test(e.detail.value.toString())) {
            return this.bill.money
          }
          let money = Number.parseFloat(e.detail.value)
          if (Number.isNaN(money)) {
            return this.bill.money
          }
          this.bill.money = money
          this.reCaculateBill()
        }
      },
      bindDescription(e) {
        this.bill.description = e.detail.value
      },
      bindSplitMoney(index, e) {
        let participant = this.bill.participants.data[index]
        if (e.detail.value.length === 0) {
          participant.split_money = 0
          this.reCaculateBill()
          return participant.split_money
        } else {
          if ((/^0[1-9]\d*$/.test(e.detail.value.toString()))) {
            participant.split_money = Number.parseFloat(e.detail.value)
            this.reCaculateBill()
            return participant.split_money
          }
          let regex = /^(0|[1-9]\d*)(\.(\d){0,2})?$/
          if (!regex.test(e.detail.value.toString())) {
            return participant.split_money
          }
          let money = Number.parseFloat(e.detail.value)
          if (Number.isNaN(money)) {
            return participant.split_money
          }
          participant.split_money = e.detail.value
          console.log(this.bill.participants.data[index].split_money)
          this.reCaculateBill()
        }
      },
      bindFixed(index, e) {
        let participant = this.bill.participants.data[index]
        participant.fixed = !e.detail.value
        this.reCaculateBill()
      },
      bindPaid(index, e) {
        let participant = this.bill.participants.data[index]
        participant.paid = e.detail.value
      },
      removeParticipant(index) {
        this.bill.participants.data.splice(index, 1)
        this.reCaculateBill()
      },
      async showChecker() {
        // 加载参与成员数据
        await this.loadParticipants(this.bill.activity_id)
        this.showChecker = true
        this.$apply()
      },
      onCheckerFinished(detail) {
        console.log(detail)
        detail.selected.forEach(item => {
          this.bill.participants.data.unshift({user_id: item.id, fixed: 0, paid: 0, user: item})
        })
        this.reCaculateBill()
      },
      bindTempItemTitle(e) {
        console.log(e)
        this.itemTitle = e.detail.value
      },
      bindTempItemMoney(e) {
        if (e.detail.value.length === 0) {
          this.itemMoney = 0
          return 0
        } else {
          if ((/^0[1-9]\d*$/.test(e.detail.value.toString()))) {
            this.itemMoney = Number.parseFloat(e.detail.value)
            return this.itemMoney
          }
          let regex = /^(0|[1-9]\d*)(\.(\d){0,2})?$/
          if (!regex.test(e.detail.value.toString())) {
            return this.itemMoney
          }
          let money = Number.parseFloat(e.detail.value)
          if (Number.isNaN(money)) {
            return this.itemMoney
          }
          this.itemMoney = money
        }
      },
      addItem() {
        console.log(this.itemMoney)
        console.log(this.itemTitle)
        let money = Number.parseFloat(this.itemMoney)
        if (Number.isNaN(money)) {
          return false
        }
        this.itemMoney = money.toFixed(2)
        console.log(this.itemMoney)
        if (this.itemTitle.length === 0) {
          return false
        }
        this.bill.items.data.unshift({title: this.itemTitle, money: this.itemMoney})
      },
      removeItem(index) {
        console.log(index)
        this.bill.items.data.splice(index, 1)
      },
      bindItemTitle(index, e) {
        let item = this.bill.items.data[index]
        item.title = e.detail.value
      },
      bindItemMoney(index, e) {
        let item = this.bill.items.data[index]
        if (e.detail.value.length === 0) {
          item.money = 0
          return 0
        } else {
          if ((/^0[1-9]\d*$/.test(e.detail.value.toString()))) {
            item.money = Number.parseFloat(e.detail.value)
            return item.money
          }
          let regex = /^(0|[1-9]\d*)(\.(\d){0,2})?$/
          if (!regex.test(e.detail.value.toString())) {
            return item.money
          }
          let money = Number.parseFloat(e.detail.value)
          if (Number.isNaN(money)) {
            return item.money
          }
          item.money = money
        }
      },
      save() {
        let that = this
        wx.showActionSheet({
          itemList: ['确定'],
          itemColor: '#ff3536',
          async success(res) {
            console.log(res.tapIndex)
            try {
              // 请求接口，传入参数
              let response = await api.authRequest({
                url: 'activities/' + that.bill.activity_id + '/bills/' + (that.bill.id ? that.bill.id : ''),
                method: 'POST',
                data: that.bill
              })

              if (response.statusCode === 204) {
                wepy.navigateBack({
                  delta: 1
                })
              }
            } catch (err) {
              console.log(err)
              wepy.showModal({
                title: '提示',
                content: '服务器错误，请联系管理员'
              })
            }
          },
          fail(res) {
            console.log(res.errMsg)
          }
        })
      },
      exit() {
        let that = this
        wx.showActionSheet({
          itemList: ['确定'],
          itemColor: '#ff3536',
          async success(res) {
            try {
              // 请求接口，传入参数
              let response = await api.authRequest({
                url: 'bills/' + that.bill.id,
                method: 'DELETE'
              })
              if (response.statusCode === 204) {
                wepy.navigateBack({
                  delta: 1
                })
              }
            } catch (err) {
              console.log(err)
              wepy.showModal({
                title: '提示',
                content: '服务器错误，请联系管理员'
              })
            }
            console.log(res.tapIndex)
          },
          fail(res) {
            console.log(res.errMsg)
          }
        })
      }
    }
    async onLoad(options) {
      this.user = await this.$parent.getCurrentUser()
      this.bill.activity_id = options.activity_id
      if (options.id) {
        try {
          // 请求接口，传入参数
          let response = await api.authRequest({
            url: 'bills/' + options.id + '?include=items,participants.user'
          })

          if (response.statusCode === 200) {
            this.bill = response.data
            this.$apply()
          }
        } catch (err) {
          console.log(err)
          wepy.showModal({
            title: '提示',
            content: '服务器错误，请联系管理员'
          })
        }
      }
      // 加载参与成员数据
      await this.loadParticipants(options.activity_id)

      this._debounceReCalculate = debounce(() => {
        let remainMoney = Number.parseFloat(this.bill.money)
        if (Number.isNaN(remainMoney)) {
          return false
        }
        console.log('Remain Money:' + remainMoney)
        let splitCount = 0
        this.bill.participants.data.forEach(item => {
          if (item.fixed) {
            console.log('Item Split Money:' + item.split_money)
            remainMoney = new Decimal(remainMoney).sub(item.split_money).toNumber()
          } else {
            splitCount += 1
          }
        })
        if (splitCount > 0) {
          console.log('Floor:' + remainMoney)
          let splitMoney = new Decimal(Math.floor(new Decimal(remainMoney).mul(100).div(splitCount).toNumber())).div(100).toNumber()
          console.log('Split Count:' + splitCount)
          console.log('Split Money:' + splitMoney)
          let lastOneSplitMoney = new Decimal(remainMoney).sub(new Decimal(splitMoney).mul(splitCount - 1).toNumber()).toNumber()
          console.log('Last One Split Money:' + lastOneSplitMoney)
          this.bill.participants.data.forEach(item => {
            if (!item.fixed) {
              if (remainMoney === lastOneSplitMoney) {
                item.split_money = lastOneSplitMoney
                console.log('last one:' + lastOneSplitMoney)
              } else {
                item.split_money = splitMoney
                console.log('not last one:' + remainMoney)
              }
              remainMoney = new Decimal(remainMoney).sub(item.split_money).toNumber()
            }
          })
        }
        this.calculating = false
        console.log('计算完毕')
        this.$apply()
      }, 500)
    }
    async loadParticipants(activityId) {
      try {
        let response = await api.authRequest({
          url: 'activities/' + activityId + '/participants'
        })
        if (response.statusCode === 200) {
          this.activityParticipants = response.data.data
          this.$apply()
        }
      } catch (err) {
        console.log(err)
        wepy.showModal({
          title: '提示',
          content: '服务器错误，请联系管理员'
        })
      }
    }
    /**
     * 重新计算分摊金额
     * @returns {boolean}
     */
    reCaculateBill() {
      this.calculating = true
      this._debounceReCalculate()
    }

    events = {
    }
  }
</script>
