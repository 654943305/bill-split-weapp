<style lang="less">

</style>
<template>
    <view wx:if="{{ syncShow }}" style="position: fixed; width: 100%; height: 100%; background: white; top: 0; left: 0; z-index: 999; overflow: auto;">
        <view style="height: 50px; text-align: center; font-size: 16px; font-weight: bold; position: fixed; padding: 10px; z-index: 10; width: 100%; box-sizing: border-box; background: white;">
            选择参与人
            <text style="display: inline-block; position: absolute; left: 10px; font-weight: normal;" bindtap="onCancel">取消</text>
            <button style="position: absolute; right:10px; margin: 0;" class="weui-btn mini-btn" disabled="{{ selectedData.length === 0 }}" type="primary" size="mini" bindtap="onFinish">完成</button>
        </view>
        <view style="padding-top: 60px;" class="weui-cells weui-cells_after-title">
            <checkbox-group bindchange="checkboxChange">
                <label class="weui-cell weui-check__label" wx:for="{{syncData}}" wx:key="value">
                    <checkbox class="weui-check" value="{{item.id}}" checked="{{item.checked}}"/>

                    <view class="weui-cell__hd weui-check__hd_in-checkbox">
                        <icon class="weui-icon-checkbox_circle" type="circle" size="23" wx:if="{{!item.checked}}"/>
                        <icon class="weui-icon-checkbox_success" type="success" size="23" wx:if="{{item.checked}}"/>
                    </view>
                    <view class="weui-cell__bd" style="display: flex; align-items: center;">
                        <image src="{{item.avatar_url}}" style="width: 40px; height: 40px; border-radius: 100%; margin-right: 5px;" />{{item.name}}
                    </view>
                </label>
            </checkbox-group>

        </view>

    </view>
</template>
<script>
  import wepy from 'wepy'
  export default class ParticipantsChecker extends wepy.component {
    data = {
      selectedData: []
    }
    props = {
      // 父页面传入，请求参数
      syncShow: {
        type: Boolean,
        default: false,
        twoWay: true
      },
      syncData: {
        type: Array,
        default: []
      }
    }
    close() {
      this.syncShow = false
      this.syncData.forEach(item => {
        item.checked = false
      })
      this.selectedData = []
    }
    methods = {
      checkboxChange(e) {
        console.log('列表数据：')
        console.log(this.syncData)
        this.syncData.forEach(item => {
          console.log(e.detail.value)
          if (e.detail.value.includes(item.id.toString())) {
            if (this.selectedData.findIndex(selectedItem => selectedItem.id === item.id) === -1) {
              item.checked = true
              this.selectedData.push(item)
              console.log('插入了数据：')
              console.log('插入后：')
              console.log(this.selectedData)
            }
          } else {
            console.log('需要删除的索引：' + this.selectedData.findIndex(selectedItem => selectedItem.id === item.id))
            if (this.selectedData.findIndex(selectedItem => selectedItem.id === item.id) !== -1) {
              item.checked = false
              console.log('改变前：')
              console.log(this.selectedData)
              this.selectedData.splice(this.selectedData.findIndex(selectedItem => selectedItem.id === item.id), 1)
              console.log('改变后：')
              console.log(this.selectedData)
            }
          }
          console.log('长度:' + this.selectedData.length)
        })
      },
      onCancel() {
        this.close()
      },
      onFinish() {
        const myEventDetail = {selected: this.selectedData} // detail对象，提供给事件监听函数
        this.$emit('finished', myEventDetail)
        this.close()
      }
    }
  }
</script>
